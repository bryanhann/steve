#!/usr/bin/env python3
import os
import sys
import argparse
from pathlib import Path
PROG=Path(__file__).name

USAGE="""\
USAGE:
    steve.path [--eval] SUBCOMMAND

SUBCOMMANDS:
    help            - this help
    list            - list components of PATH
    clean           - echo a PATH with duplicates removed
    add [args*]     - echo a PATH with [args*] appended (if not already there)
    remove [args*]  - echo a PATH with [args*] removed

OPTIONS:
    --eval
        Prepend 'export PATH=' when echoing a PATH.
        Useful for callers who wish to evaluate the output
        to change the PATH in their current environment.

        Only compatable with subcommands that echo a PATH.

        E.g.:
            $ eval `steve.path --eval add foo bar`
            This should add components 'foo' and 'bar'to the
            caller's PATH variable.
"""

parser=argparse.ArgumentParser()
parser.add_argument( 'cmd', nargs='*' )
parser.add_argument( '--eval', action='store_true')

ARGS = parser.parse_args()
PARTS = os.environ['PATH'].split(':')
NAME = ARGS.cmd and ARGS.cmd[0] or None

def die(text):
    sys.stderr.write(f"{PROG}: {text}\n")
    exit(99)

def main():
    try: cmd=eval('cmd_' + ARGS.cmd.pop(0) )
    except NameError: cmd=cmd_help
    except IndexError: cmd=cmd_help
    cmd(*ARGS.cmd)


def nodups(parts):
    clean = []
    for part in parts:
        if not part in clean:
            clean.append(part)
    return clean


def echo(parts):
    """Print the standard path for the parts

    Join the parts with a colon. Prefix the 
    path with the EXPORT string
    """
    newpath=':'.join(parts)
    if ARGS.eval:
        print( "export PATH=" + newpath )
    else:
        print( newpath )

# FUNCTIONS INVOKED AS SUBCOMMANDS

def cmd_help(*args):
    """Print this help"""
    ARGS.eval and die(f"command '{NAME}' is incompatable with --eval option.")
    print(USAGE)

def cmd_list(*args):
    ARGS.eval and die(f"command '{NAME}' is incompatable with --eval option.")
    list(map(print,PARTS))

def cmd_clean(*args): 
    echo (nodups(PARTS))

def cmd_remove(*args): 
    echo( [part for part in PARTS if not part in args] )

def cmd_add(*args):
    echo( PARTS + [arg for arg in args if not arg in PARTS] )

def usage ():
    print( USAGE )

if __name__=='__main__':
    main()
    #usage()
